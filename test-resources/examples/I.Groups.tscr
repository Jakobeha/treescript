Subst[body, old, new].

&Main[].
\x -> \x &Recurse[&Curry[]] &Main[];
\x -> \x &Recurse[&Apply[]] &Main[];
\x -> \x;

&Curry[].
scm'(lambda (\x \x2 . \xs) \body)' -> scm'(lambda (\x) (lambda (\x2 . \xs) \body))';
scm'(\f \arg . \args)' -> scm'((\f \arg) . \args)',
  T[] <- \args &NonEmpty[],
  False[] <- T[\f, scm'lambda'] &IsEqual[];

&Apply[].
scm'((lambda (\x) \body) \arg)' -> Subst[\body, \x, \arg] &Subst[],
  Scheme_Symbol[\_] <- \x;

&Subst[].
Subst[\old, \old, \new] -> \new;
Subst[scm'(lambda (\old) \body)', \old, \_] -> scm'(lambda (\old) \body)',
  Scheme_Symbol[\_] <- \old;
Subst[scm'(lambda (\x) \body)', \old, \new] -> scm'(lambda (\x) \body2)',
  Scheme_Symbol[\_] <- \x,
  \body2 <- Subst[\body, \old, \new] &Subst[];
Subst[scm'(\f \x)', \old, \new] -> scm'(\f2 \x2)',
  \f2 <- Subst[\f, \old, \new] &Subst[],
  \x2 <- Subst[\x, \old, \new] &Subst[];
Subst[\body, \_, \_] -> \body;

&NonEmpty[].
Scheme_SCons[\_, \_] -> T[];

&IsEqual[].
T[\x, \x] -> True[];
T[\_, \_] -> False[];

&Recurse[&x].
\x -> \x &x[];
scm'(\x \y)' -> scm'(\x2 \y)',
  \x2 <- \x &Recurse[&x[]];
scm'(\x \y)' -> scm'(\x \y2)',
  \y2 <- \y &Recurse[&x[]];
scm'(lambda (\x) \body)' -> scm'(lambda (\x) \body2)',
  \body2 <- \body &Recurse[&x[]];
