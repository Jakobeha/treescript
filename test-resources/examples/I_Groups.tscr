Subst[@Scheme_SCons|@Scheme_SNil|@Scheme_Symbol|@Scheme_Atom, @Scheme_SCons|@Scheme_SNil|@Scheme_Symbol|@Scheme_Atom, @Scheme_SCons|@Scheme_SNil|@Scheme_Symbol|@Scheme_Atom].

&Main[].
\x -> \x &Recurse[&Curry[]] &Main[];
\x -> \x &Recurse[&Apply[]] &Main[];
\x -> \x;

&Curry[].
'(lambda (\x \x2 . \xs) \body)' -> '(lambda (\x) (lambda (\x2 . \xs) \body))';
'(\f \arg . \args)' -> '((\f \arg) . \args)',
  T[] <- \args &NonEmpty[],
  False[] <- T[\f, 'lambda'] &IsEqual[];

&Apply[].
'((lambda (\x) \body) \arg)' -> Subst[\body, \x, \arg] &Subst[],
  Scheme_Symbol[\_] <- \x;

&Subst[].
Subst[\old, \old, \new] -> \new;
Subst['(lambda (\old) \body)', \old, \_] -> '(lambda (\old) \body)',
  Scheme_Symbol[\_] <- \old;
Subst['(lambda (\x) \body)', \old, \new] -> '(lambda (\x) \body2)',
  Scheme_Symbol[\_] <- \x,
  \body2 <- Subst[\body, \old, \new] &Subst[];
Subst['(\f \x)', \old, \new] -> '(\f2 \x2)',
  \f2 <- Subst[\f, \old, \new] &Subst[],
  \x2 <- Subst[\x, \old, \new] &Subst[];
Subst[\body, \_, \_] -> \body;

&NonEmpty[].
Scheme_SCons[\_, \_] -> T[];

&IsEqual[].
T[\x, \x] -> True[];
T[\_, \_] -> False[];

&Recurse[&x].
\x -> \x &x[];
'(\x \y)' -> '(\x2 \y)',
  \x2 <- \x &Recurse[&x[]];
'(\x \y)' -> '(\x \y2)',
  \y2 <- \y &Recurse[&x[]];
'(lambda (\x) \body)' -> '(lambda (\x) \body2)',
  \body2 <- \body &Recurse[&x[]];
