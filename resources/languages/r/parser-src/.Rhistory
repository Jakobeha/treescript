is.numeric("4")
as.numeric("4")
check.numeric("4")
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
str_extract(shopping_list, "[a-z]{1,4}")
str_extract(shopping_list, "\\b[a-z]{1,4}\\b")
# Extract all matches
str_extract_all(shopping_list, "[a-z]+")
str_extract_all(shopping_list, "\\b[a-z]+\\b")
str_extract_all(shopping_list, "\\d")
# Simplify results into character matrix
str_extract_all(shopping_list, "\\b[a-z]+\\b", simplify = TRUE)
str_extract_all(shopping_list, "\\d", simplify = TRUE)
# Extract all words
str_extract_all("This is, suprisingly, a sentence.", boundary("word"))
library("stringr")
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
str_extract(shopping_list, "[a-z]{1,4}")
str_extract(shopping_list, "\\b[a-z]{1,4}\\b")
# Extract all matches
str_extract_all(shopping_list, "[a-z]+")
str_extract_all(shopping_list, "\\b[a-z]+\\b")
str_extract_all(shopping_list, "\\d")
# Simplify results into character matrix
str_extract_all(shopping_list, "\\b[a-z]+\\b", simplify = TRUE)
str_extract_all(shopping_list, "\\d", simplify = TRUE)
# Extract all words
str_extract_all("This is, suprisingly, a sentence.", boundary("word"))
str_extract_all("foo bar", "[a-z]+")
str_extract_all("foo bar", "[a-z]+")
str_extract("foo bar baz", "[a-z]")
library(stringr)
str_extract("foo bar baz", "[a-z]")
str_extract("foo bar baz", "[a-z]+")
str_extract("foo bar baz", "[a-z]+")[1]
str_extract("foo bar baz", "^([^ ]+) (.*)")
grep("foo bar baz", "^([^ ]+) (.*)")
regexpr("foo bar baz", "^([^ ]+) (.*)")
regexpr("foo bar baz", "^([^ ]+) (.*)$")
grep("foo bar baz", "^([^ ]+) (.*)$")
grep("^([^ ]+) (.*)$", "foo bar baz")
grep("^([^ ]+) (.*)$", "foo bar baz", value=TRUE)
str_match("foo bar baz", "^([^ ]+) (.*)$")
str_match("foo bar baz", "^([^ ]+) (.*)$")[2]
str_match("foo bar baz", "^([^ ]+) (.*)$")[3]
paste("foo", "bar")
paste0("foo", "bar")
cat0("foo", "bar")
cat("foo", "bar")
cat("foo", "bar", sep="")
grep("[a-z]+", " foo bar baz ")
grep("[a-z]+", " foo bar baz ", value=TRUE)
grep("([a-z]+)", " foo bar baz ", value=TRUE)
str_sub("apple", 2)
str_match("foo", "bar")
library(stringr)
str_match("foo", "bar")
str_match("foo", "bar")[1]
if (x <- str_match("foo", "bar")[1]) { "foo" }
if (is.na(x <- str_match("foo", "bar")[1])) { "foo" }
if (is.na(x <- str_match("foo", "bar")[1])) { x }
print(expression(foo <- bar))
exprs <- parse(file = "./parser.R")
print(exprs)
print(exprs[0])
print(exprs[1])
print(exprs[2])
print(exprs[3])
print(exprs[1][1])
print(exprs[1][0])
print(exprs[1][2])
print(exprs[1][1])
print(exprs[1][[0]])
print(exprs[1][[1]])
print(exprs[1][[2]])
print("foo")
print("foo\n")
cat("foo\n")
cat(dQuote("foo\n"))
foo <- exprs[1]
foo
print(foo[[1]])
print(foo[[2]])
print(foo[[1]][[1]])
print(foo[[1]][[2]])
expression(x <- 5)
expression(x <- 5)[1]
expression(x <- 5)[2]
expression(x <- 5)[[1]]
expression(x <- 5)[[1]][[1]]
expression(x <- 5)[[1]][-1]
expression(x <- 5)[[1]][[2]]
expression(x <- 5)[[1]][[3]]
foo <- expression(x <- 5)[[1]][-1]
foo[1]
foo[2]
foo[[1]]
foo[[2]]
foo[-1]
is.list(foo)
is.vector(foo)
is.data.frame(foo)
foo <- as.list(foo)
foo
foo[1]
foo[2]
is.empty(foo)
length(foo)
for (bar in foo) bar
for (bar in foo) print(bar)
library(rlang)
install.packages(rlang)
install.packages("rlang")
library(rlang)
format("foo")
format("foo\n")
"foo"
toString("foo")
toString("foo\n")
cat(toString("foo\n"))
as.string(5)
toString(5)
foo <- expression(raiseSyntax <- function(msg) {
write(paste0("syntax error - ", msg), stderr())
quit(save="no", status=1, runLast=FALSE)
})[1]
foo
foo[1]
foo[[1]]
foo <- foo[[1]]
foo[1]
foo[[1]]
foo[[2]]
foo[[3]]
foo <- foo[[3]]
foo[[1]]
foo[[2]]
typeof(foo[[2]])
foo <- foo[[2]]
foo
foo[1]
foo[2]
foo[1]
foo[[1]]
foo[[2]]
foo[[1]]
foo[1]
foo[2]
foo[1][[1]]
foo <- expression(raiseSyntax <- function(msg) {
write(paste0("syntax error - ", msg), stderr())
quit(save="no", status=1, runLast=FALSE)
})[[1]]
foo
foo[[3]]
foo <- foo[[3]]
foo[[1]]
foo[[2]]
foo[[3]]
names(foo[[2]])
foo
names(foo)
length(foo)
is.missing(foo[[2]])
missing(foo[[2]])
is.null(foo[[2]])
foo[[2]]
foo[[2]][[1]]
is.null(foo[[2]][[1]])
is.na(foo[[2]][[1]])
install.packages("purrr")
library(purrr)
install.packages("purrr")
names(list("foo", bar="baz", qux))
names(list("foo", bar="baz", 3))
names(list("foo", "baz", 3))
names(list("foo", "baz", 3))[[1]]
names(list("foo", bar="baz", 3))[[1]]
names(list("foo", bar="baz", 3))[[2]]
zip
is.null("")
NULL == NULL
foo[[2]]
foo[[2]][[1]]
exists('foo')
exists('foo[[2]]')
bar <- foo[[2]][[1]]
bar
exists('bar')
is_missing(bar)
is_missing(foo)
1:2
1:0
gsub("\\$([0-9]+)", "splice_\\1", "foo($1, $2)")
library(stringr)
str_extract("foo3", "$foo([0-9])")
str_extract("foo3", "^foo([0-9])$")
str_match("foo3", "^foo([0-9])$")
str_match("foo3", "^foo([0-9]+)$")[[2]]
str_match("foobar", "^foo([0-9]+)$")[[2]]
as.integer(str_match("foo3", "^foo([0-9]+)$")[[2]])
as.integer(str_match("foobar", "^foo([0-9]+)$")[[2]])
str("Foo")
str("Foo\n")
summary("Foo")
cat(str("Foo\n"))
list()
length(list())
print("Hello")
expression(x <- 2 + 3)
expression(x <- 2 + 3)[[1]]
print(expression(x <- 2 + 3)[[1]])
cat(expression(x <- 2 + 3)[[1]])
library(stringr)
str_match("foo", "bar")
is.na(str_match("foo", "bar"))
as.symbol("foo")
"foo"
print(as.symbol("foo"))
print(call2(as.symbol("foo")))
library(rlang)
print(call2(as.symbol("foo")))
print(call2(as.symbol("+", 2, 3)))
print(call2(as.symbol("+"), 2, 3))
library.install("stringi")
install.packages("stringi")
library(stringi)
list(missing_arg())
x <- missing_arg()
list(x)
