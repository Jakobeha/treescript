&Main[].
\x -> \x &Recurse[&OptimizeFor[]]; // Don't want to apply again
\x -> \x;

&OptimizeFor[].
r'
for (\i in \iter) {
  ...\in
}' -> r'
if (is.data.frame(\x)) {
  \y <- as.list(\x)

  for (\i in \iter) {
    ...\in2
  }

  \x <- as.data.frame(\y)
}',
  R_Symbol[\_] <- \i,
  T[\in2, \_] <- T[\in, 0] &MapAccum[&Count[&Recurse[&OptimizeForReplace[\x, \y, \i]]]],
  \x <- \in &First[&FirstRecurse[&OptimizeForFind[\i]]],
  \y <- T[R_Symbol[\1]] #Gen_FreeString;

&OptimizeForFind[\i].
r'\x[[\i]] <- \body' -> \x;

&OptimizeForReplace[\x, \y, \i].
r'\x[[\i]] <- \body' -> r'\y[[\i]] <- \body';

&First[&x].
Cons[\x, \_] -> \y,
  \y <- \x &x[];
Cons[\_, \xs] -> \y,
  \y <- \xs &First[&x[]];

&MapAccum[&x].
T[Nil[], \a] -> T[Nil[], \a];
T[Cons[\x, \xs], \ax] -> T[Cons[\y, \ys], \az],
  T[\y, \az] <- T[\x, \ay] &x[],
  T[\ys, \ay] <- T[\xs, \ax] &MapAccum[&x[]];

&Count[&x].
T[\x, \nx] -> T[\y, \ny],
  \y <- \x &x[],
  \ny <- T[\nx, 1] #Num_Add;
T[\x, \nx] -> T[\x, \nx];

&Recurse[&x].
\x -> \x &x[];
R_Call[\fun, \args] -> R_Call[\fun2, \args2],
  True[] <- T[\a, 0] #Num_GreaterThan,
  \a <- T[\a1, \a2] #Num_Add,
  T[\fun2, \a1] <- T[\fun, 0] &Count[&Recurse[&x[]]],
  T[\args2, \a2] <- T[\args, 0] &MapAccum[&Count[&Recurse[&x[]]]];
R_PairList[\elems] -> R_PairList[\elems2],
  True[] <- T[\a, 0] #Num_GreaterThan,
  T[\elems2, \a] <- T[\elems, 0] &Count[&Recurse[&x[]]];

&FirstRecurse[&x].
\x -> \x &x[];
R_Call[\fun, \_] -> \res,
  \res <- \fun &FirstRecurse[&x[]];
R_Call[\_, \args] -> \res,
  \res <- \args &First[&FirstRecurse[&x[]]];
R_PairList[\elems] -> \res,
  \res <- \elems &First[&FirstRecurse[&x[]]];
